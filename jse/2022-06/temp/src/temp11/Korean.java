package temp11;

public class Korean {	//라이브러리 클래스: main메소드 x
	//(1) 필드(모델링 대상 객체의 속성)
	String nation = "대한민국";		//국적: 어차피 모델링 대상 객체가 "한국인"이기 때문에 값을 줌.
	String name;					//이름
	String ssn;						//사회보장번호(Social Security Number, 주민번호)
	
	//(2) 생성자
	/* public Korean(String n, String s) {
	 * name = n;
	 * ssn = s;
	 * }
	 */
	
	//생성자 대전제4: 생성자의 매개변수의 이름은, 이 매개변수의 값으로 초기화할
	//				  필드의 이름과 동일하게 명명하는 것이 관례 => 이름충돌 필히 발생
	//				  => this 키워드로 이름 충돌을 원천적으로 예방하라
	
	//(2) 생성자
	//			매개변수(Parameters) 선언부
	//			 |-----------------------|
	public Korean(String name, String ssn) {	//생성자 호출시, 외부에서 "이름", "사회보장번호"를 받아서
		System.out.println("***this***: " + this);
		
		//this 키워드를 이용한, 필드의 초기화(매개변수를 이용한)
		this.name = name;						//"이름" 필드를 초기화 수행
		this.ssn = ssn;							//"사회보장번호" 필드를 초기화 수행
		
		this.method();	//메소드 호출
		
//		Lvalue(필드) = Rvalue(매개변수); 로 하고 싶었으나		
//		name = name;		//왼쪽도 매개변수, 오른쪽도 매개변수
//		ssn = ssn;			//이름 충돌이 생기면 가까운 블록을 찾는다. => 가까운 매개변수로 판단
		
		//아래 방법1, 방법2와 같이
		//이름 충돌을 해결하고, 필드와 같은 이름의 지역변수와 차별두는 방법
		//=> this 키워드를 사용!
		
		//방법1. 차라리 매개변수 이름을 바꾼다.(필드 이름은 바꾸면 안 됨.)
//		name = name1;
//		ssn = ssn1;
		//...
		
		//방법2. 필드의 이름과 같은 이름의 지역변수 선언과 초기화 가능도 문제.
		//(*주의사항*) 생성자 블록 안에서는 클래스의 필드와 같은 이름의 지역변수를 선언하지 않도록 주의(비록 오류는 아니지만, 버그의 개연성 발생)
//		String ssn = null;	//필드가 아닌 지역 변수
		
		//Lvalue(필드) = Rvalue(매개변수); => 이 목적을 더 확실히 달성해주기 위해 자바 키워드로 this(클래스 블록 안에서만 사용 가능)가 나옴.
	} //Constructor#2
	
	//(3) 메소드(모델링 대상 객체의 행위/동작/기능)
	void method() {
		String ssn = null;
		
		System.out.println(ssn);		//필드 이름만으로 필드에 접근 가능하지만 이름 충돌 방지를 위해
		
		//강력 권고:
		//메소드 블록이든, 생성자 블록이든, 클래스에 선언된 필드/메소드를 사용하고자 한다면
		//명시적으로 앞에 this 키워드를 붙여서 사용하라! => 우발적으로 이름충돌을 예방하고
		//명시적으로 지역변수이름/매개변수이름과 필드의 이름 충돌을 원천적으로 예방 가능
		System.out.println(this.ssn);
	
	} //method
} //end class



















